---
import parse, {Parser, SelectorFunction} from './parsers';
import Code from 'astro/components/Code.astro';
export {Parser} from './parsers';

/**
 * Component to fetch values from remote files, optionally passing a selector to extract a value from the file
 * (e.g. a JSON object).
 *
 * Import:
 * import RemoteValue from 'path/to/components/RemoteValue/RemoteValue.astro';
 *
 * Usage syntax:
 * <RemoteValue url="https://remote.url.to.file" selector="selector.path" parser={one of Parser values} default="default value" />
 *
 * Props:
 * url: remote URL to fetch the file from
 * parser: value from the Enum exported by RemoteValue.astro. If not defined, the component will use the file extension
 *          from the URL.
 * selector: parsed-dependent syntax to extract the value from the remote file. It can also be a callback function that
 *          will be called with the entire file as an argument and should return the value to extract.
 *          E.g. for JSON, we use jsonpath-plus to provide an XPath-based syntax.
 * defaultValue: default value if we cannot retrieve the element (otherwise, we'll render "not available").
 *          This is recommended in case you ever change the remote file and the selector doesn't work anymore.
 *
 * These three examples return the same "clientSecret" element:
 * <RemoteValue url="https://some.github.repo/kickstart/kickstart.json"
 *              selector="$.requests.4.body.application.oauthConfiguration.clientSecret" />
 * <RemoteValue url="https://some.github.repo/kickstart/kickstart.json"
 *              selector="$.requests.[?(@.url === '/api/application/#{applicationId}')].body.application.oauthConfiguration.clientSecret" />
 * <RemoteValue url="https://some.github.repo/kickstart/kickstart.json"
 *              selector={(element) => element.requests.find(e => e.url === '/api/application/#{applicationId}').body.application.oauthConfiguration.clientSecret} />
 *
 * If you need to render the value inside a <Code> component, you need to pass a `codeRenderer` callback function:
 * <RemoteValue
 *     url="https://some.github.repo/kickstart/kickstart.json"
 *     selector="$.requests.4.body.application.oauthConfiguration.clientSecret"
 *     codeRenderer={(value) => `OP_SECRET_KEY="${value}" bundle exec rails s`} />
 * You can also pass a `codeLang` prop in case the <Code> element doesn't detect it automatically.
 */

/**
 * Available props.
 */
export interface Props {
    /**
     * Url to fetch code from.
     */
    url: string;

    /**
     * Selector to extract the value from the content.
     * This is parser-specific but is normally some kind of XPath.
     * E.g. JSONPath syntax for JSON objects (https://www.npmjs.com/package/jsonpath-plus)
     */
    selector: string | SelectorFunction;

    /**
     * Optional parser name. If no one was informed, we'll use the file extension.
     */
    parser?: Parser;

    /**
     * Default value if there's an error retrieving file.
     */
    default?: string;
}

// Extracting props
const {url, selector, parser, default: defaultValue, codeRenderer, codeLang} = Astro.props as Props;

// Value that will be rendered
let value;

try {
    const response = await fetch(url);
    const content = await response.text();

    // Using the selector to look up the value
    if ((content) && (selector)) {
        value = parse(url, content, selector, parser);
    }
} catch (e) {
    console.error(`Error retrieving remote value from ${selector} at ${url}`, e);
}

// Default value
if (!value) {
    value = defaultValue || "not available";
}
---
{(codeRenderer) ? <Code code={codeRenderer(value)} lang={codeLang}/> : value}
