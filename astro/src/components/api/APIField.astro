---
import AvailableSince from './AvailableSince.astro';
import ReadOnly from './ReadOnly.astro';
import Optional from './Optional.astro';

interface Props {
  name: string;
  description?: string;
  type?: string;
  required?: boolean;
  optional?: boolean;
  since?: string;
  defaults?: string;
  deprecated?: boolean;
  renderif?: boolean;
  readonly?: boolean;
}

const { name, description, type, required, optional, since, defaults, deprecated, renderif=true, readonly }: Props = Astro.props;
---
{/*If you put the API field inside a conditional block it can break the markdown parsing, `renderif` solves that problem  */}
{/* Note: if you use a description parameter instead of a body, you'll get a single-line version */}
{ renderif && <div class='border-t border-slate-300 dark:border-slate-800'>
  <div class="flex flex-wrap mt-6 space-x-3 items-baseline">
    <code class="api-field-name">{ name }</code>
    { type && <span class="dark:text-gray-400 text-gray-500 text-sm pt-1">{type}</span> }
    { description && <span class="px-3">{description}</span> }
    { required && <span class="px-[6px] py-1 rounded-md text-orange-500 border-orange-500 border-2 dark:font-semibold font-bold uppercase text-xs dark:text-[10px]">required</span> }
    { defaults && <span class="pt-1 dark:text-gray-400 text-gray-500 text-sm justify-center">Defaults to {defaults}</span> }
    { since && <AvailableSince since={since} /> }
    { deprecated && <span class="text-red-700 text-sm">DEPRECATED</span> }
    { readonly && <ReadOnly /> }
  </div>
  <div class="ml-4 mb-7 font-normal text-sm">
    <slot></slot>
  </div>
</div>
}
