
---
import DockerSpinupAccordion from 'src/components/get-started/DockerSpinupAccordion.astro';
import Code from 'astro/components/Code.astro';
import Aside from 'src/components/Aside.astro';
import { RemoteValue } from '@fusionauth/astro-components';

export interface Props {
  /**
   * Full URI to extract values from kickstart.json
   * e.g. https://raw.githubusercontent.com/FusionAuth/fusionauth-quickstart-ruby-on-rails-web/main/kickstart/kickstart.json
   */
  kickstartUri: string;

  /**
   * Flag that indicates the codeRoot
   */
  codeRoot?: boolean;

}

const { kickstartUri, codeRoot } = Astro.props as Props;
---
<dd>
<h2> Docker Requirements</h2>
<Aside type="note">
    You need to have Docker and Docker Compose installed.</Aside>


<p>This document has been tested with Docker version `27.3.1`, but should work with other versions.</p>

  <i>Testing the Docker Installation</i>

 <Code lang="shell" code="docker -v" />
  
 <i>Result Of Testing the Docker Installation</i>
  <Code lang="shell" code="Docker version 27.3.1, build ce12230"/>

<h2> Install and Start</h2>

<h3>Clone the Code</h3>
<p>First off, grab the code from the repository and change into that directory.</p>

<Code lang="shell" code={`git clone https://github.com/FusionAuth/fusionauth-example-express-start-here/ && \\
cd fusionauth-example-express-start-here`}/>

<h3>Start FusionAuth via Docker</h3>

<p>You'll find a Docker Compose file (<code>docker-compose.yml</code>) and an environment variables configuration file (<code>.env</code>) in the root directory of the repo.</p>

<p>Stand up FusionAuth on your machine with the following command.</p>

<Code lang="shell" code="docker compose up -d" />

<p>You should see multiple containers start up; one for the database, one for FusionAuth and one for our mail server.</p>

<p>Here you are using a bootstrapping feature of FusionAuth called <a href="/docs/get-started/download-and-install/development/kickstart">Kickstart</a>. When FusionAuth comes up for the first time, it will look at the <code>kickstart/kickstart.json</code> file and configure FusionAuth to the specified state. In this case, it is adding an application and a couple of users which you'll use later in the guide.</p>

<Aside type="note">
    <p>If you ever want to reset the FusionAuth application, you need to delete the volumes created by Docker Compose by executing <code style="white-space: nowrap">docker compose down -v</code>, then re-run <code>docker compose up -d</code>.</p>
</Aside>

<h3>Initial Settings</h3>
<p>FusionAuth will be initially configured with these settings:</p>

<ul>
    <li>Your example username is <code><RemoteValue url={kickstartUri} selector="$.variables.userEmail" /></code> and the password is <code><RemoteValue url={kickstartUri} selector="$.variables.userPassword" /></code>.</li>
    <li>Your admin username is <code><RemoteValue url={kickstartUri} selector="$.variables.adminEmail" /></code> and the password is <code><RemoteValue url={kickstartUri} selector="$.variables.adminPassword" /></code>.</li>
    <li>The base URL of FusionAuth is <code>http://localhost:9011/</code>.</li>
</ul>

<h2>Summing Up</h2>

<p>To verify that your system is set up, navigate to <a href="http://localhost:9011/admin">http://localhost:9011/admin</a> and log in using the admin credentials above. You will see the FusionAuth admin UI.</p>

<p>Congratulations!  You've got your own FusionAuth instance running on your system using Docker.</p>

</dd>
