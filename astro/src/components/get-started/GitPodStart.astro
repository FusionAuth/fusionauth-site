---
import Aside from 'src/components/Aside.astro';
import Code from 'astro/components/Code.astro';
import { RemoteValue } from '@fusionauth/astro-components';

export interface Props {
  /**
   * Full URI to extract values from kickstart.json
   * e.g. https://raw.githubusercontent.com/FusionAuth/fusionauth-quickstart-ruby-on-rails-web/main/kickstart/kickstart.json
   */
  kickstartUri: string;

  /**
   * Flag that indicates whether this in API quickstart or not (default)
   */
  api?: boolean;
}

const { kickstartUri, api = false } = Astro.props as Props;
---
<h2> Install/Run in GitPod</h2>
<dd>
<a href="https://gitpod.io/#https://github.com/synedra/fusionauth-example-express-start-here" target="_blank" alt="Open in GitPod"><img src="https://gitpod.io/button/open-in-gitpod.svg" /></a>

<p>The GitPod environment will spin up docker containers with a FusionAuth server and its components.</p>

<p>Here you are using a bootstrapping feature of FusionAuth called <a href="/docs/get-started/download-and-install/development/kickstart">Kickstart</a>. When FusionAuth comes up for the first time, it will look at the <code>kickstart/kickstart.json</code> file and configure FusionAuth to your specified state.</p>

<p>After the servers start up (which takes a few minutes), you will be presented with a login screen in the GitPod 'Simple Browser'.</p>

<p>Login to the server with 'admin@example.com' and 'password' for the credentials.</p>

<details><summary>Initial Settings</summary>
<p>FusionAuth will be initially configured with these settings:</p>

<ul>
    <li>Your client Id is <code><RemoteValue url={kickstartUri} selector="$.variables.applicationId" /></code>.</li>
    <li>Your client secret is <code><RemoteValue url={kickstartUri} selector={($) => $.variables.clientSecret || $.requests.find(r => r.url === '/api/application/#{applicationId}').body.application.oauthConfiguration.clientSecret} /></code>.</li>
    {(api)
      ? (
        <li>Your example teller username is <code><RemoteValue url={kickstartUri} selector="$.variables.tellerEmail" /></code> and the password is <code><RemoteValue url={kickstartUri} selector="$.variables.tellerPassword" /></code>. They will have the role of <code>teller</code>.</li>
        <li>Your example customer username is <code><RemoteValue url={kickstartUri} selector="$.variables.customerEmail" /></code> and the password is <code><RemoteValue url={kickstartUri} selector="$.variables.customerPassword" /></code>. They will have the role of <code>customer</code>.</li>
      )
      : (
        <li>Your example username is <code><RemoteValue url={kickstartUri} selector="$.variables.userEmail" /></code> and the password is <code><RemoteValue url={kickstartUri} selector="$.variables.userPassword" /></code>.</li>
      )
    }
    <li>Your admin username is <code><RemoteValue url={kickstartUri} selector="$.variables.adminEmail" /></code> and the password is <code><RemoteValue url={kickstartUri} selector="$.variables.adminPassword" /></code>.</li>
    <li>The base URL of FusionAuth is <code>http://localhost:9011/</code>.</li>
</ul>

<p>You can log in to the <a href="http://localhost:9011/admin">FusionAuth admin UI</a> and look around if you want to, but with Docker and Kickstart, everything will already be configured correctly.</p>

</details>

<h2> Summing Up</h2>

<p>To verify that your system is set up, login to the UI when the login screen appears.</p>

<p>You're done with step 1... congratulations!  You've got your own FusionAuth server running on your system.
Your system has been set up using a Kickstart to pre-populate the tutorial environment with an application and some users. 
Feel free to explore what's available before moving on to configuring your application's security using FusionAuth.</p>


</dd>

