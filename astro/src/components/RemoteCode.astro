---
/**
  * Remote code fetcher and syntax highlighter via the Astro Code component.
  */
import { marked } from 'marked';

export interface Props {
  /**
   * Url to fetch code from.  Also allows selecting specific line(s) of code with
   * the Github line syntax.
   * E.g., https://raw.githubusercontent.com/FusionAuth/fusionauth-example-client-libraries/main/ruby/Gemfile#L3
   */
	url: string;

  /**
   * The language of your code.
   * Supports all languages listed here: https://github.com/shikijs/shiki/blob/main/docs/languages.md#all-languages
   *
   * @default "plaintext"
   */
  lang?: string;

  /**
   * Optional tags marking beginning and end of content to include
   * Loosely based on https://docs.asciidoctor.org/asciidoc/latest/directives/include-tagged-regions/
   * Note: Currently only supports one set of tags.
   */
  tags?: string;

  /**
   * The title of the remote code section, shown as a piece of text above the block.
   */
  title?: string;
}

const { url, lang = 'plaintext', tags, title, markdown } = Astro.props as Props;
import { Code } from 'astro/components';
let remoteSelectedCode = "not available";

try {
  const remoteResponse = await fetch(url);
  const remoteCode = await remoteResponse.text();

  if (tags) {
    remoteSelectedCode = selectTagged(remoteCode, tags);
  } else {
    const matchLines = url.match(/.*#L(\d+)(-L(\d+))?$/);
    if (matchLines) {
      remoteSelectedCode = selectLines(remoteCode, matchLines[1], matchLines[3]);
    } else {
      remoteSelectedCode = remoteCode.trim();
    }
  }

  if (markdown) {
    remoteSelectedCode = remoteSelectedCode.replace('-->', '');
    remoteSelectedCode = marked.parse(remoteSelectedCode);
    console.log(remoteSelectedCode);
  }
} catch (e) {
  console.log("Couldn't retrieve remote code",e);
}

function selectTagged(content: string, tags: string): string {
  const lines = content.split("\n");

  const startLine = lines.findIndex((line) => line.includes(`tag::${tags}`));
  const endLine = lines.findIndex((line) => line.includes(`end::${tags}`));
  return lines.slice(startLine + 1, endLine).join("\n").replace(/\s+$/g, '');
}

function selectLines(content: string, lineNum: string, lineEnd: string): string {
  const lines = content.split("\n");
  if (lineNum && lineEnd) {
    return lines.slice(lineNum-1, lineEnd-1).join("\n");
  } else if (lineNum) {
    return lines[lineNum - 1];
  } else {
    return content;
  }
}
---
{title &&
  <p data-title={title}>
    <em>{ title }</em>
  </p>
}
{ markdown ?
  <article set:html={remoteSelectedCode} /> :
  <Code code={remoteSelectedCode} lang={lang}/>
}
