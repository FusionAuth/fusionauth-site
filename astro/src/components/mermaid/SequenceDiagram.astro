---
import renderDiagram from './render-diagram.js';
import cache, { generateHash } from './cache.js';
import 'src/css/diagrams.css';

const props = { ...Astro.props };
props.code = props.code || '';
props.id = props.id || 'fusionauth-diagram';
props.errorBoxes = props.errorBoxes || [];
props.warningBoxes = props.warningBoxes || [];
props.infoBoxes = props.infoBoxes || [];

const uniqueKey = generateHash([props.code, props.id]);

if (cache[uniqueKey] === undefined) {
  /* Render the mermaid diagram */
  const result: string | false = await renderDiagram({
    code: props.code,
    id: props.id,
  });

  if (result) {
    /* Store diagram data to cache */
    cache[uniqueKey] = result;
  }
}

let css = '';
props.errorBoxes.forEach(i => {
  css += `
.mermaid-diagram g:nth-child(${i}) .note { fill: #fecaca !important; stroke: #f87171 !important; }
.dark .mermaid-diagram g:nth-child(${i}) .note { fill: #f87171 !important; stroke: #fecaca !important; }
`;
});
props.warningBoxes.forEach(i => {
  css += `
.mermaid-diagram g:nth-child(${i}) .note { fill: #fed7aa !important; stroke: #f58320 !important; }
.dark .mermaid-diagram g:nth-child(${i}) .note { fill: #f58320 !important; stroke: #fed7aa !important; }
`;
});
props.infoBoxes.forEach(i => {
  css += `
.mermaid-diagram g:nth-child(${i}) .note { fill: #99f6e4 !important; stroke: #2dd4bf !important; }
.dark .mermaid-diagram g:nth-child(${i}) .note { fill: #2dd4bf !important; stroke: #99f6e4 !important; }
`;
});
---

{
  cache[uniqueKey] && (
    <div class="mermaid-diagram flex justify-center">
      <Fragment set:html={cache[uniqueKey]} data-test="mermaid" />
    </div>
  )
}
{ props.alt &&
  <p class="italic not-prose text-blue-600 text-center dark:text-orange-200"> {props.alt} </p>
}
<style set:html={css}/>
