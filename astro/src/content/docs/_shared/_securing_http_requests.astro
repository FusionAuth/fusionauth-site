---
const { request_entity, request_entity_lc, ssl_certificate_sentence } = Astro.props;
---
<h3>TLS v1.2</h3>
<p>
The first step in securing your {request_entity}s is to ensure that they are using TLS v1.2 or higher. You should be using a web server that is configured with a certificate from a valid certificate authority and to only receive traffic from a secure connection. We also recommend that you disable all older secure protocols including SSL, TLS 1.0 and TLS 1.1.
</p>

<p>
If you need a certificate, most cloud providers offer them or you can use LetsEncrypt to generate a certificate and ensure it is always up-to-date.
</p>

<h3>Headers</h3>
<p>
When you configure your {request_entity} with FusionAuth, you should include a security header of some kind. There are two ways to define a security header:
</p>
<ul>
  <li>Add a Basic Authentication username and password under the <strong>Security</strong> tab</li>
  <li>Define an HTTP header under the <strong>Headers</strong> tab</li>
</ul>

<p>
In either case, your {request_entity} code should validate the security header to ensure the request is coming from FusionAuth. Here's some example code that validates an `Authorization` header:
</p>

<strong>Example {request_entity}</strong>
<pre is:raw>
router.route('/fusionauth-{request_entity_lc}').post((req, res) => {
  const authorization = req.header('Authorization');
  if (authorization !== 'API-KEY') {
    res.status(401).send({
      'errors': [{
        'code': '[notAuthorized]'
      }]
    });
  } else {
    // process the request 
  }
});
</pre>

<h3>Certificates</h3>
<p>
You may provide an x.509 certificate to use with your {request_entity}. {ssl_certificate_sentence}. It is used to establish a TLS connection to the {request_entity} endpoint. Use this option if FusionAuth cannot connect to your {request_entity} without the certificate.
</p>

<p>
Providing this certificate will build a custom SSL context for requests made for the {request_entity}. Therefore, any other JDK keystores and certificate authority chains will be bypassed for this request. 
</p>

<h3>Firewalls</h3>
<p>
In addition to using TLS and a security header, you might also want to put a firewall in front of your {request_entity}. In most cases, this firewall will only allow traffic to your {request_entity} that originated from your FusionAuth instance. Depending on how you are hosting your {request_entity}, you might be able to lock down the URL for your {request_entity} specifically. You might also leverage an API gateway or a proxy to ensure that only traffic coming from FusionAuth is routed to your {request_entity}. The exact specifics of deploying and configuring a Firewall are outside the scope of this document, but you can consult the documentation for your proxy, API Gateway or hosting provider to determine how to manage it.
</p>

<p>
As an example, you can configure an AWS Application Load Balancer so that traffic coming from the IP address of your FusionAuth servers with a URL of `\https://apis.mycompany.com/fusionauth-{request_entity_lc}` is routed through. You can then configure the Application Load Balancer so that all other traffic to that URL is rejected.
</p>

<h3>Controlling Traffic with a Proxy</h3>

<p>
Since version `1.31.0`, FusionAuth can be configured to send all outbound HTTP traffic, including that from a {request_entity}, through a proxy. This allows you examine any messages sent from FusionAuth. You can audit them, only allow connections to certain hosts, or otherwise modify them.
</p>

<p>
To configure a proxy for FusionAuth outbound traffic, use the `proxy.*` [configuration options](/docs/reference/configuration).
</p>

