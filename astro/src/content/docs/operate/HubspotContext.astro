<script>
  // Function to build hs_context JSON and insert it into the form
  function setHubSpotContext() {
    const hutk = getCookie('hubspotutk'); // Get HubSpot tracking cookie

    const hsContext = {
      hutk: hutk, // Include the tracking cookie
      pageUrl: window.location.href,
      pageName: document.title
    };

    document.getElementById('hs_context').value = JSON.stringify(hsContext);
  }

  // Helper function to read cookies
  function getCookie(name) {
    const match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));
    return match ? match[2] : null;
  }

  // Attach submit event handler to add hs_context before submission
  document.getElementById('myActualForm').addEventListener('submit', function (e) {
    setHubSpotContext();
    // The form will submit normally with hs_context included

    // Wait for the DOM to be fully loaded before running the script
    document.addEventListener('DOMContentLoaded', () => {
      // Get the form element using its ID
      const form = document.querySelector('#myActualForm');

      // Check if the form element was found to prevent errors
      if (form) {
        // Add an event listener for form submission
        form.addEventListener('submit', function handleSubmit(event) { // Named function for potential removal
          // --- IMPORTANT: Regarding event.preventDefault() ---
          // If you uncomment the line below (`event.preventDefault();`),
          // the form data will NOT be submitted to the HubSpot URL specified in the 'action' attribute.
          // The browser's default action of sending the form data will be stopped.
          // This is useful if you want to handle the submission entirely with JavaScript (e.g., via AJAX)
          // or if you only want to display a message without actual submission for testing.

          // For this example, we'll let the form submit to HubSpot in a new tab (due to target="_blank")
          // and then show the thank you message on the original page.
          // If you want to prevent the default submission and new tab, uncomment the next line:
          event.preventDefault();

          // Select the div containing the form inputs and button
          const formContents = form.querySelector('div.flex.gap-x-4');
          if (formContents) {
            // Hide the form inputs and button
            formContents.style.display = 'none';
          }

          // Create the thank you message element
          const thankYouMessageElement = document.createElement('p');
          thankYouMessageElement.textContent = 'Thank you for your submission!';
          thankYouMessageElement.className = 'thank-you-message'; // Apply styling

          // Add the thank you message inside the form element
          // Prepending adds it as the first child of the form
          form.prepend(thankYouMessageElement);

          // Optional: To prevent the message from being added multiple times if the event could somehow re-trigger
          // (less likely here as contents are hidden, but good practice in some scenarios)
          // form.removeEventListener('submit', handleSubmit);

          // Note: Because the form has `target="_blank"`, the actual form submission
          // to HubSpot will happen in a new browser tab. This script modifies
          // the current page to show the thank you message within the form area.
        });
      } else {
        // Log an error if the form isn't found, which helps in debugging
        console.error('Error: Form with ID #myActualForm was not found.');
      }
    });
  });
</script>

