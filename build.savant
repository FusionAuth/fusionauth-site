/*
 * Copyright (c) 2016-2021, FusionAuth, All Rights Reserved
 */

fusionauthWebsiteStyleVersion = "0.3.36"

project(group: "io.fusionauth", name: "fusionauth-site", version: "3.0.0", licenses: ["ApacheV2_0"]) {
  workflow {
    standard()
  }

  publishWorkflow {
    subversion(repository: "http://svn.inversoft.org/savant")
  }

  dependencies {
    group(name: "css", export: false) {
      dependency(id: "io.fusionauth:fusionauth-style:fusionauth-website-style:${fusionauthWebsiteStyleVersion}:css")
      dependency(id: "io.fusionauth:fusionauth-style:fusionauth-website-style:${fusionauthWebsiteStyleVersion}:css.map")
    }
  }
}

release = loadPlugin(id: "org.savantbuild.plugin:release-git:1.0.0")
dependency = loadPlugin(id: "org.savantbuild.plugin:dependency:1.0.2")
file = loadPlugin(id: "org.savantbuild.plugin:file:1.0.2")

target(name: "css", description: "Copies the CSS into place") {
  file.delete {
    fileSet(dir: "site/assets/css", includePatterns: [~/fusionauth-website.+/,~/fusionauth-login-style.+/])
  }

  dependency.copy(to: "site/assets/css") {
    dependencies(group: "css", transitive: false, fetchSource: true)
  }

  file.rename {
    fileSet(dir: "site/assets/css", includePatterns: [~/fusionauth-website.+/])
    filter(token: "-{integration}", value: "")
  }
}

target(name: "clean", description: "cleans the project", dependsOn: ["css"]) {
  cleanExecute(["bundle", "exec", "jekyll", "clean"])
}

target(name: "compile", description: "builds the project", dependsOn: ["css"]) {
  if (switches.has("drafts")) {
    cleanExecute(["bundle", "exec", "jekyll", "build", "--drafts"])

  } else {
    cleanExecute(["bundle", "exec", "jekyll", "build"])
  }
}

target(name: "serve", description: "Build and watch the project", dependsOn: ["css"]) {
  cleanExecute(["bundle", "exec", "jekyll", "serve", "--drafts", "--future", "--incremental", "-o"])
}

target(name: "watch", description: "Build and watch the project", dependsOn: ["css"]) {
  cleanExecute(["bundle", "exec", "jekyll", "build", "--drafts", "--future", "--incremental", "--watch"])
}

target(name: "release", description: "Releases a full version of the project", dependsOn:["clean", "compile"]) {
  release.release()
}

target(name: "push", description: "Push the site to fusionauth.io") {
  // Skip checking Git if we are forced to do so (use the force Luke)
  if (!switches.has("force")) {
    output.infoln("Checking git")
    if (!cleanExecute(["git", "diff-index", "--quiet", "origin/master", "--"])) {
      output.infoln("You must commit and push your changes before running this command. (Use --force to skip this check, but keep in mind that your local changes won't be visible until they are pushed)")
      exit 1
    }
  }

  // refresh the algolia index.
  // TODO : I wonder if we should move this to the `deploy.sh` script ? Does Algolia have REST API we could use for this?
  //        Then this would only run on the server during a deploy and we wouldn't have to have the API key configured locally.
  if (!switches.has("skipReindex")) {
    cleanExecute(["bundle", "exec", "jekyll", "algolia"])
  }

  // Allow the command line switch --user to specify a different user on the SSH command
  def host = "www-1.fusionauth.io"
  if (switches.has("user")) {
    host = switches.values("user")[0] + "@" + host
  }

  output.infoln("Deploying...")
  cleanExecute(["ssh", "-t", host, "sudo -H -u www-data -g www-data /var/git/fusionauth-site/src/deploy.sh"])
}

boolean cleanExecute(List<String> args) {
  ProcessBuilder pb = new ProcessBuilder(args).inheritIO().directory(new File('.'))
  clearEnvironment(pb)

  def process = pb.start()
  process.consumeProcessOutput(System.out, System.err)
  process.waitFor()
  return process.exitValue() == 0
}

/**
 * Clears out the RBENV variables in the environment.
 *
 * @param pb The ProcessBuilder to clear out.
 */
static def clearEnvironment(ProcessBuilder pb) {
  pb.environment().remove("RBENV_VERSION")
  pb.environment().remove("RBENV_DIR")
  pb.environment().remove("RBENV_ROOT")
}
